name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: "registry.digitalocean.com/you-meal"
  IMAGE_NAME: "you-meal-app"
  CONTAINER_NAME: "you-meal"
  LOGS_PATH: "/root/logs"
  IMAGE_PATH: "/root/images"

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.1

      - name: Golang Test
        run: go test ./...

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Build container image
        run: docker build -t $REGISTRY/$IMAGE_NAME:${{ github.sha }} .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove old image tags from registry
        run: |
          echo "Fetching tags for image $IMAGE_NAME"
          # Получаем список всех тегов для образа, исключая текущий тег
          IMAGE_TAGS=$(doctl registry repository list-tags $IMAGE_NAME --format "name" --no-header)
          
          for TAG in $IMAGE_TAGS; do
            if [ "$TAG" != "${GITHUB_SHA:0:7}" ]; then
              echo "Deleting old tag: $TAG"
              # Удаляем старый тег (манифест), если он не текущий
              doctl registry repository delete-manifest $IMAGE_NAME $TAG --force || echo "Failed to delete $TAG"
            fi
          done

      - name: Push image to DigitalOcean Container Registry
        run: docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to DigitalOcean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME,REGISTRY,LOGS_PATH,IMAGE_PATH,DIGITALOCEAN_ACCESS_TOKEN,GITHUB_SHA
          script: |
            # Логинимся в реестр
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            
            # Останавливаем старый контейнер, если он запущен
            echo "Stopping container $IMAGE_NAME"
            docker stop $IMAGE_NAME || echo "Container $IMAGE_NAME not running."

            # Удаляем старый контейнер
            echo "Removing container $IMAGE_NAME"
            docker rm $IMAGE_NAME || echo "Container $IMAGE_NAME does not exist."

            # Запускаем новый контейнер с последним образом
            echo "Running new container $IMAGE_NAME"
            docker run -d \
              --restart always \
              --publish 8080:8080 \
              --name $IMAGE_NAME \
              --volume $LOGS_PATH:/logs \
              --volume $IMAGE_PATH:/images \
              $REGISTRY/$IMAGE_NAME:${{ github.sha }}



# name: CI

# on:
#     push:
#         branches:
#             - main
#     pull_request:
#         branches:
#             - main

# env:
#     REGISTRY: "registry.digitalocean.com/you-meal"
#     IMAGE_NAME: "you-meal-app"
#     CONTAINER_NAME: "you-meal"
#     LOGS_PATH: "/root/logs"
#     IMAGE_PATH: "/root/images"

# concurrency:
#   group: build-${{ github.ref }}
#   cancel-in-progress: true

    
# jobs:
#     test:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Checkout main
#               uses: actions/checkout@v4
            
#             - name: Setup Golang
#               uses: actions/setup-go@v5
#               with:
#                 go-version: 1.23.1
            
#             - name: Golang Test
#               run: go test ./...
#     build_and_push:
#       runs-on: ubuntu-latest
#       needs: test
#       steps:
#         - name: Checkout the repo 
#           uses: actions/checkout@v4
        
#         - name: Build container image
#           run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

#         - name: Install doctl
#           uses: digitalocean/action-doctl@v2
#           with:
#             token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
#         - name: Log in to DigitalOcean Container Registry with short-lived credentials
#           run: doctl registry login --expiry-seconds 600
      
#         - name: Remove all old images
#           run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

#         - name: Push image to DigitalOcean Container Registry
#           run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
        
#     deploy:
#       runs-on: ubuntu-latest
#       needs: build_and_push
    
#       steps:
#         - name: Deploy to Digital Ocean droplet via SSH action
#           uses: appleboy/ssh-action@master
#           with:
#             host: ${{ secrets.HOST }}
#             username: ${{ secrets.USERNAME }}
#             key: ${{ secrets.SSH_KEY }}
#             envs: IMAGE_NAME,REGISTRY,LOGS_PATH,IMAGE_PATH,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
#             script: |
#               # Login to registry
#               docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
#               # Stop running container
#               docker stop $(echo $IMAGE_NAME)
#               # Remove old container
#               docker rm $(echo $IMAGE_NAME)
#               # Run a new container from a new image
#               docker run -d \
#               --restart always \
#               --publish 8080:8080 \
#               --name $(echo $IMAGE_NAME) \
#               --volume $(echo $LOGS_PATH):/logs \
#               --volume $(echo $IMAGE_PATH):/images \
#               $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
